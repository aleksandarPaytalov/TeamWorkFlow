name: 'Terraform Plan and Apply'

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["TeamWorkFlow CI/CD Pipeline"]
    types:
      - completed
    branches: [ "master" ]

permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Login to Azure via Azure CLI
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Retrieve secrets from Azure Key Vault and create terraform.tfvars
    - name: Get Terraform Variables from Key Vault
      env:
        KEY_VAULT_NAME: ${{ secrets.AZURE_KEY_VAULT_NAME }}
      run: |
        echo "Retrieving variables from Key Vault: $KEY_VAULT_NAME"

        # Verify Key Vault access
        if ! az keyvault show --name $KEY_VAULT_NAME > /dev/null 2>&1; then
          echo "Error: Cannot access Key Vault $KEY_VAULT_NAME"
          exit 1
        fi
        
        # Create terraform.tfvars file with values from Key Vault
        cat > terraform.tfvars << EOF
        resource_group_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "resource-group-name" --query value -o tsv)"
        location = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "location" --query value -o tsv)"
        subscription_id = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "subscription-id" --query value -o tsv)"
        service-plan-name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "service-plan-name" --query value -o tsv)"
        app-name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "app-name" --query value -o tsv)"
        repo_url = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "repo-url" --query value -o tsv)"
        mssqlserver_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "mssqlserver-name" --query value -o tsv)"
        mssqlserver_administrator_login = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "mssqlserver-administrator-login" --query value -o tsv)"
        mssqlserver_administrator_login_password = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "mssqlserver-administrator-login-password" --query value -o tsv)"
        mssqldatabase_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "mssqldatabase-name" --query value -o tsv)"
        firewall_rule_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "firewall-rule-name" --query value -o tsv)"
        sku_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "sku-name" --query value -o tsv)"
        os_type = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "os-type" --query value -o tsv)"
        dotnet_version = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "dotnet-version" --query value -o tsv)"
        connection_string_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "connection-string-name" --query value -o tsv)"
        connection_string_type = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "connection-string-type" --query value -o tsv)"
        ASPNETCORE_ENVIRONMENT = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "ASPNETCORE-ENVIRONMENT" --query value -o tsv)"
        start_ip_address = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "start-ip-address" --query value -o tsv)"
        end_ip_address = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "end-ip-address" --query value -o tsv)"
        license_type = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "license-type" --query value -o tsv)"
        database_sku_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "database-sku-name" --query value -o tsv)"
        collation = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "collation" --query value -o tsv)"
        mssql_server_version = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "mssql-server-version" --query value -o tsv)"
        EOF
        
        echo "terraform.tfvars created successfully"
        echo "Variables retrieved from Key Vault successfully"

    # Initialize a new or existing Terraform working directory
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -diff *.tf

    # Validates the configuration files in a directory
    - name: Terraform Validate
      run: terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -out=tfplan -no-color
      env:
        TF_LOG: ERROR

    # Save plan to artifacts
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: tfplan

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: ${{ (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main') || github.event_name == 'workflow_dispatch' }}

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Login to Azure via Azure CLI
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Retrieve secrets from Azure Key Vault and create terraform.tfvars
    - name: Get Terraform Variables from Key Vault
      env:
        KEY_VAULT_NAME: ${{ secrets.AZURE_KEY_VAULT_NAME }}
      run: |
        echo "Retrieving variables from Key Vault: $KEY_VAULT_NAME"

        # Verify Key Vault access
        if ! az keyvault show --name $KEY_VAULT_NAME > /dev/null 2>&1; then
          echo "Error: Cannot access Key Vault $KEY_VAULT_NAME"
          exit 1
        fi
        
        # Create terraform.tfvars file with values from Key Vault
        cat > terraform.tfvars << EOF
        resource_group_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "resource-group-name" --query value -o tsv)"
        location = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "location" --query value -o tsv)"
        subscription_id = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "subscription-id" --query value -o tsv)"
        service-plan-name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "service-plan-name" --query value -o tsv)"
        app-name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "app-name" --query value -o tsv)"
        repo_url = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "repo-url" --query value -o tsv)"
        mssqlserver_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "mssqlserver-name" --query value -o tsv)"
        mssqlserver_administrator_login = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "mssqlserver-administrator-login" --query value -o tsv)"
        mssqlserver_administrator_login_password = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "mssqlserver-administrator-login-password" --query value -o tsv)"
        mssqldatabase_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "mssqldatabase-name" --query value -o tsv)"
        firewall_rule_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "firewall-rule-name" --query value -o tsv)"
        sku_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "sku-name" --query value -o tsv)"
        os_type = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "os-type" --query value -o tsv)"
        dotnet_version = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "dotnet-version" --query value -o tsv)"
        connection_string_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "connection-string-name" --query value -o tsv)"
        connection_string_type = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "connection-string-type" --query value -o tsv)"
        ASPNETCORE_ENVIRONMENT = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "ASPNETCORE-ENVIRONMENT" --query value -o tsv)"
        start_ip_address = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "start-ip-address" --query value -o tsv)"
        end_ip_address = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "end-ip-address" --query value -o tsv)"
        license_type = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "license-type" --query value -o tsv)"
        database_sku_name = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "database-sku-name" --query value -o tsv)"
        collation = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "collation" --query value -o tsv)"
        mssql_server_version = "$(az keyvault secret show --vault-name $KEY_VAULT_NAME --name "mssql-server-version" --query value -o tsv)"
        EOF
        
        echo "terraform.tfvars created successfully"
        echo "Variables retrieved from Key Vault successfully"

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory
    - name: Terraform Init
      run: terraform init

    # Download saved plan from artifacts
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan -no-color
      env:
        TF_LOG: ERROR
