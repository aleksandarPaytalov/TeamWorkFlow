name: TeamWorkFlow CI/CD Pipeline

on:
  push:
    branches: [ "master", "development" ]
  pull_request:
    branches: [ "master", "development" ]

jobs:
  unit-tests:
    name: "Unit Tests"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run Unit Tests
      run: dotnet test UnitTests/UnitTests.csproj --no-build --configuration Release --verbosity normal --logger trx --results-directory TestResults
      env:
        USE_IN_MEMORY_DATABASE: true

    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: TestResults/*.trx
        retention-days: 30

  integration-tests:
    name: "Integration Tests (Playwright)"
    runs-on: ubuntu-latest
    needs: unit-tests
    if: success()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Install Playwright browsers
      run: |
        # Build the test project to restore Playwright packages
        dotnet build TeamWorkFlow.PlaywrightTests/TeamWorkFlow.PlaywrightTests.csproj

        # Install Playwright CLI globally
        dotnet tool install --global Microsoft.Playwright.CLI || echo "Playwright CLI already installed"

        # Install browsers only (skip system dependencies that cause issues)
        playwright install chromium
      env:
        PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright

    - name: Start TeamWorkFlow application
      run: |
        cd TeamWorkFlow
        # Start the application in background
        nohup dotnet run --configuration Release --no-build > app.log 2>&1 &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        echo "Application started with PID: $APP_PID"

        # Wait for application to start
        echo "Waiting for application to start..."
        sleep 15

        # Check if process is still running
        if kill -0 $APP_PID 2>/dev/null; then
          echo "Application is running"
        else
          echo "Application failed to start"
          cat app.log
          exit 1
        fi
      env:
        ASPNETCORE_ENVIRONMENT: Development
        USE_IN_MEMORY_DATABASE: true
        ASPNETCORE_URLS: "https://localhost:7015;http://localhost:5142"

    - name: Wait for application to be ready
      run: |
        echo "Checking application health..."
        for i in {1..30}; do
          if curl -f -s -k https://localhost:7015 > /dev/null 2>&1; then
            echo "Application is ready!"
            exit 0
          fi
          echo "Attempt $i: Application not ready yet, waiting..."
          sleep 2
        done
        echo "Application failed to become ready"
        if [ -f TeamWorkFlow/app.log ]; then
          echo "Application logs:"
          cat TeamWorkFlow/app.log
        fi
        exit 1

    - name: Run Playwright Integration Tests
      run: |
        echo "Starting Playwright tests..."
        dotnet test TeamWorkFlow.PlaywrightTests/TeamWorkFlow.PlaywrightTests.csproj \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --logger trx \
          --results-directory TestResults \
          --collect:"XPlat Code Coverage"
      env:
        USE_IN_MEMORY_DATABASE: true
        PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

    - name: Stop application
      if: always()
      run: |
        if [ ! -z "$APP_PID" ]; then
          kill $APP_PID || true
        fi

  pipeline-summary:
    name: "Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()

    steps:
    - name: Pipeline Results Summary
      run: |
        echo "## TeamWorkFlow CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || needs.integration-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "🎉 **All tests passed!** The application is ready for deployment." >> $GITHUB_STEP_SUMMARY
          exit 0
        elif [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "❌ **Unit tests failed.** Integration tests were skipped." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "❌ **Integration tests failed.** Please check the test results." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
